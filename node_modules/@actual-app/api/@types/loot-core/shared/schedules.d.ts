import type { IRuleOptions } from '@rschedule/core';
export declare function getStatus(nextDate: string, completed: boolean, hasTrans: boolean, upcomingLength: string): "completed" | "paid" | "due" | "upcoming" | "missed" | "scheduled";
export declare function getHasTransactionsQuery(schedules: any): import("./query").Query;
export declare function getRecurringDescription(config: any, dateFormat: any): string;
export declare function recurConfigToRSchedule(config: any): IRuleOptions[] | ({
    byDayOfMonth: any;
    start: import("@rschedule/core").RuleOption.Start;
    end?: import("@rschedule/core").RuleOption.End;
    duration?: import("@rschedule/core").RuleOption.Duration;
    count?: import("@rschedule/core").RuleOption.Count;
    frequency: import("@rschedule/core").RuleOption.Frequency;
    interval?: import("@rschedule/core").RuleOption.Interval;
    weekStart?: import("@rschedule/core").RuleOption.WeekStart;
    byDayOfWeek?: import("@rschedule/core").RuleOption.ByDayOfWeek[];
    byHourOfDay?: import("@rschedule/core").RuleOption.ByHourOfDay[];
    byMillisecondOfSecond?: import("@rschedule/core").RuleOption.ByMillisecondOfSecond[];
    byMinuteOfHour?: import("@rschedule/core").RuleOption.ByMinuteOfHour[];
    byMonthOfYear?: import("@rschedule/core").RuleOption.ByMonthOfYear[];
    bySecondOfMinute?: import("@rschedule/core").RuleOption.BySecondOfMinute[];
} | {
    byDayOfWeek: any;
    start: import("@rschedule/core").RuleOption.Start;
    end?: import("@rschedule/core").RuleOption.End;
    duration?: import("@rschedule/core").RuleOption.Duration;
    count?: import("@rschedule/core").RuleOption.Count;
    frequency: import("@rschedule/core").RuleOption.Frequency;
    interval?: import("@rschedule/core").RuleOption.Interval;
    weekStart?: import("@rschedule/core").RuleOption.WeekStart;
    byDayOfMonth?: import("@rschedule/core").RuleOption.ByDayOfMonth[];
    byHourOfDay?: import("@rschedule/core").RuleOption.ByHourOfDay[];
    byMillisecondOfSecond?: import("@rschedule/core").RuleOption.ByMillisecondOfSecond[];
    byMinuteOfHour?: import("@rschedule/core").RuleOption.ByMinuteOfHour[];
    byMonthOfYear?: import("@rschedule/core").RuleOption.ByMonthOfYear[];
    bySecondOfMinute?: import("@rschedule/core").RuleOption.BySecondOfMinute[];
})[];
export declare function extractScheduleConds(conditions: any): {
    payee: any;
    account: any;
    amount: any;
    date: any;
};
export declare function getScheduledAmount(amount: any): any;
export declare function describeSchedule(schedule: any, payee: any): string;
